#ifndef    CUDA_WRAPPER_HXX
# define   CUDA_WRAPPER_HXX

# include "CudaWrapper.cuh"

namespace utils {

  inline
  CudaWrapper::~CudaWrapper() {}

  inline
  bool
  CudaWrapper::check(cuda::stream_t /*stream*/) {
    // We actually don't really need the input stream, we will just peek at the
    // error generated by any API call and return `true` if there are some.
    return isError(cudaPeekAtLastError());
  }

  inline
  std::string
  CudaWrapper::getLastError() {
    const std::lock_guard guard(m_propsLocker);

    std::string err;
    err.swap(m_lastError);

    return err;
  }

  inline
  bool
  CudaWrapper::isError(const cudaError_t& error) {
    return error != cudaSuccess;
  }

  inline
  void
  CudaWrapper::checkAndSaveError(const cudaError_t& error) {
    // If the input `error` is a problem, report it.
    if (isError(error)) {
      const std::lock_guard guard(m_propsLocker);
      m_lastError = cudaGetErrorString(error);
    }
  }

}

#endif    /* CUDA_WRAPPER_HXX */